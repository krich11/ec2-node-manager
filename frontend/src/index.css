@tailwind base;
@tailwind components;
@tailwind utilities;


/* In your CSS file (e.g., index.css or App.css) */

/* Basic styling for centered handles (adjust as needed) */
/* Keep pointer-events: all; here as a base for handles */
.react-flow__handle.center-handle {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%); /* Center both vertically and horizontally */
  border: 1px solid #555; /* Example border */
  /* Remove default React Flow handle size/background if they interfere */
  width: auto;
  height: auto;
  pointer-events: all; /* Ensure handles are interactive for connecting */
}

/* Styling for the source handle (smaller, visible, can initiate drags) */
.react-flow__handle.center-handle.source-handle-style {
  width: 10px;  /* Set desired small size */
  height: 10px; /* Set desired small size */
  background-color: rgba(34, 139, 230, 0.8); /* Example semi-transparent color */
  border-radius: 50%; /* Make it round */
  z-index: 1001; /* Ensure source is visibly on top */
  /* pointer-events: all; is inherited from .react-flow__handle.center-handle */
}

/* Styling for the target handle (fills the node, underneath source, IS A DROP TARGET BUT DOES NOT BLOCK DRAGGING) */
.react-flow__handle.center-handle.target-handle-style {
  width: 100%; /* Make it fill the parent node horizontally */
  height: 100%; /* Make it fill the parent node vertically */
  top: 0; /* Position from top edge of parent */
  left: 0; /* Position from left edge of parent */
  transform: none; /* Remove the centering transform */
  background-color: rgba(100, 100, 100, 0.1); /* Very light semi-transparent background */
  border: none; /* Remove border if you want it to blend with node */
  /* Match node's border-radius if the node is rounded */
  border-radius: 8px; /* Replace with actual value for Tailwind's 'rounded-lg' */
  z-index: 999; /* Lower z-index than node container and source handle */
  pointer-events: none; /* <-- Prevent this handle from blocking node dragging */
}

/* Ensure node content is clickable and the node is draggable */
/* The node's main drag handle is typically the node element itself. */
/* Ensure your node container and interactive content have pointer-events: auto */
.custom-node {
  position: relative; /* Needed for absolute positioning of handles */
  pointer-events: auto; /* <-- Ensure the node container receives pointer events for dragging */
  z-index: 1000; /* Ensure it's above the target handle */
  cursor: grab; /* Indicate draggable area */
}

/* Example of ensuring node text/labels are clickable */
.custom-node .node-label {
    z-index: 1002; /* Higher than both handles and node container */
    position: relative; /* Ensure z-index works */
    pointer-events: auto; /* Ensure it receives pointer events */
}

/* Ensure the MoreHorizontal icon is clickable */
.custom-node .p-1 .opacity-60.cursor-pointer { /* Targeting the icon container and icon */
    z-index: 1002; /* Higher than handles and node container */
    position: relative; /* Ensure z-index works */
    pointer-events: auto; /* Ensure it receives pointer events */
}

/* You might need to apply pointer-events: auto; to other interactive elements */
/* within your node component as well. */

